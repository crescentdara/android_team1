package bitc.fullstack502.android_studio.network

import bitc.fullstack502.android_studio.util.AuthManager
import okhttp3.OkHttpClient
import okhttp3.logging.HttpLoggingInterceptor
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

object ApiProvider {

    // ‚úÖ BASE_URLÏùÄ Îã® Ìïú Í≥≥ÏóêÏÑúÎßå Í¥ÄÎ¶¨ (Î∞òÎìúÏãú Ïä¨ÎûòÏãúÎ°ú ÎÅùÎÇòÏïº Ìï®)
    private const val BASE_URL = "http://10.0.2.2:8080/"

    private val client: OkHttpClient by lazy {
        val log = HttpLoggingInterceptor().apply {
            level = HttpLoggingInterceptor.Level.BODY
        }
        OkHttpClient.Builder()
            // üîê ÌÜ†ÌÅ∞ ÏûêÎèô Ï≤®Î∂Ä Ïù∏ÌÑ∞ÏÖâÌÑ∞
            .addInterceptor { chain ->
                val req = chain.request()
                val token = AuthManager.accessToken()
                val newReq = if (!token.isNullOrBlank()) {
                    req.newBuilder()
                        .addHeader("Authorization", "Bearer $token")
                        .build()
                } else req
                chain.proceed(newReq)
            }
            .addInterceptor(log)
            .connectTimeout(15, TimeUnit.SECONDS)
            .readTimeout(20, TimeUnit.SECONDS)
            .writeTimeout(20, TimeUnit.SECONDS)
            .build()
    }

    val retrofit: Retrofit by lazy {
        Retrofit.Builder()
            .baseUrl(BASE_URL)
            .client(client)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
    }

    // ÌïòÎÇòÏùò ÌÜµÌï© ÏÑúÎπÑÏä§Îßå ÎÖ∏Ï∂ú
    val api: AppApi by lazy { retrofit.create(AppApi::class.java) }
}
