package bitc.fullstack502.android_studio

import android.app.AlertDialog
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.TextView
import android.widget.Toast
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.widget.SwitchCompat
import androidx.core.widget.NestedScrollView
import androidx.recyclerview.widget.DefaultItemAnimator
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import bitc.fullstack502.android_studio.adapter.FlightAdapter
import bitc.fullstack502.android_studio.model.Flight
import bitc.fullstack502.android_studio.viewmodel.FlightReservationViewModel
import com.google.android.material.button.MaterialButton
import com.google.android.material.datepicker.MaterialDatePicker
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.TimeZone

class FlightReservationActivity : AppCompatActivity() {

    // Í≥†Ï†ï Ïö¥ÏûÑ ÏÉÅÏàò (Itinerary/PaymentÏôÄ ÎèôÏùº Í∏∞Ï§Ä)
    private companion object {
        const val ADULT_PRICE    = 98_700
        const val CHILD_PRICE    = 78_700
        const val FUEL_SURCHARGE = 15_400   // 1Ïù∏Îãπ
        const val FACILITY_FEE   = 8_000    // 1Ïù∏Îãπ
    }

    // ‚ñº‚ñº‚ñº Ïä§ÌÅ¨Î°§/ÌïòÎã®Î∞î
    private lateinit var scroll: NestedScrollView
    private lateinit var bottomBar: View
    private lateinit var tvTotalPrice: TextView
    private lateinit var btnProceed: MaterialButton

    private var selectedOut: Flight? = null
    private var selectedOutPrice: Int? = null

    private val viewModel: FlightReservationViewModel by viewModels()

    // üîÑ Ïä§ÏúÑÏπò/ÎÇ†Ïßú
    private lateinit var switchTrip: SwitchCompat
    private lateinit var tvDate: TextView

    // Ï∂ú/ÎèÑÏ∞©/Ïä§Ïôë
    private lateinit var tvFrom: TextView
    private lateinit var tvTo: TextView
    private lateinit var btnSwap: com.google.android.material.floatingactionbutton.FloatingActionButton

    // ÏäπÍ∞ù/Í≤ÄÏÉâ/Î¶¨Ïä§Ìä∏
    private lateinit var tvPax: TextView
    private lateinit var btnSearch: MaterialButton
    private lateinit var rvResults: RecyclerView
    private lateinit var flightAdapter: FlightAdapter

    // ÏÉÅÌÉú
    private var isRoundTrip = true
    private var adultCount = 1
    private var childCount = 0

    // APIÏö© ÎÇ†Ïßú(yyyy-MM-dd)
    private var outDateYmd: String? = null
    private var inDateYmd: String? = null

    // Ï†úÏ£º‚ÜîÏ†úÏ£º Î∞©ÏßÄ
    private var lastNonJejuForDeparture: String = "ÍπÄÌè¨(ÏÑúÏö∏)"
    private var lastNonJejuForArrival: String = "ÍπÄÌè¨(ÏÑúÏö∏)"

    private val airports = listOf(
        "ÍπÄÌè¨(ÏÑúÏö∏)", "Ïù∏Ï≤ú", "ÍπÄÌï¥(Î∂ÄÏÇ∞)", "ÎåÄÍµ¨", "Ï≤≠Ï£º", "Í¥ëÏ£º", "Î¨¥Ïïà",
        "Ïó¨Ïàò", "Ïö∏ÏÇ∞", "ÏõêÏ£º", "ÏñëÏñë", "ÏÇ¨Ï≤ú(ÏßÑÏ£º)", "Ìè¨Ìï≠", "Íµ∞ÏÇ∞", "Ï†úÏ£º"
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_flight_reservation)

        // ----- findViewById -----
        scroll       = findViewById(R.id.scroll)
        bottomBar    = findViewById(R.id.bottomBar)
        tvTotalPrice = findViewById(R.id.tvTotalPrice)
        btnProceed   = findViewById(R.id.btnProceed)

        val rowDateView: View? = findViewById(R.id.rowDate)
        val rowPaxView: View?  = findViewById(R.id.rowPax)

        switchTrip = findViewById(R.id.switchTripType)
        tvDate     = findViewById(R.id.tvDate)
        tvFrom     = findViewById(R.id.tvFrom)
        tvTo       = findViewById(R.id.tvTo)
        btnSwap    = findViewById(R.id.btnSwap)
        tvPax      = findViewById(R.id.tvPax)
        btnSearch  = findViewById(R.id.btnSearch)
        rvResults  = findViewById(R.id.rvResults)

        // Ï¥àÍ∏∞ Ï∂ú/ÎèÑÏ∞©
        setDeparture("ÍπÄÌè¨(ÏÑúÏö∏)", recordNonJeju = true)
        setArrival("Ï†úÏ£º", recordNonJeju = false)

        // Î¶¨Ïä§Ìä∏ + ÏΩúÎ∞± Ïó∞Í≤∞ (item, position, price)
        flightAdapter = FlightAdapter(
            mutableListOf(),
            onSelect = { flight, position, price ->
                onFlightSelected(flight, position, price)
            },
            priceOf = { 98_700 }
        )
        rvResults.apply {
            layoutManager = LinearLayoutManager(this@FlightReservationActivity)
            itemAnimator  = DefaultItemAnimator()
            adapter       = flightAdapter
        }

        // Î∑∞Î™®Îç∏ ÏòµÏ†ÄÎ∏å
        viewModel.flights.observe(this) { list ->
            Log.d("FLIGHT_UI", "observe size=${list?.size ?: 0}")
            flightAdapter.update(list ?: emptyList())
        }
        viewModel.error.observe(this) { msg ->
            msg?.let { Toast.makeText(this, it, Toast.LENGTH_SHORT).show() }
        }
        viewModel.loading.observe(this) { loading ->
            btnSearch.isEnabled = !loading
            btnSearch.text = if (loading) "Í≤ÄÏÉâ Ï§ë‚Ä¶" else "Ìï≠Í≥µÌé∏ Í≤ÄÏÉâ"
        }

        // Ìé∏ÎèÑ/ÏôïÎ≥µ Ïä§ÏúÑÏπò
        isRoundTrip = switchTrip.isChecked
        tvDate.text = if (isRoundTrip) "Í∞ÄÎäî ÎÇ† ~ Ïò§Îäî ÎÇ† ÏÑ†ÌÉù" else "Ï∂úÎ∞ú ÎÇ†Ïßú ÏÑ†ÌÉù"
        updateProceedCta()  // ‚¨ÖÔ∏è Ï¥àÍ∏∞ CTA ÏÑ∏ÌåÖ

        switchTrip.setOnCheckedChangeListener { _, checked ->
            isRoundTrip = checked
            tvDate.text = if (checked) "Í∞ÄÎäî ÎÇ† ~ Ïò§Îäî ÎÇ† ÏÑ†ÌÉù" else "Ï∂úÎ∞ú ÎÇ†Ïßú ÏÑ†ÌÉù"
            outDateYmd = null
            inDateYmd  = null
            updateProceedCta()  // ‚¨ÖÔ∏è Î™®Îìú Î∞îÎÄî Îïå CTA ÏóÖÎç∞Ïù¥Ìä∏
        }

        // ÎÇ†Ïßú ÏÑ†ÌÉù
        val dateClicker = View.OnClickListener {
            if (isRoundTrip) showRangeDatePicker() else showSingleDatePicker()
        }
        rowDateView?.setOnClickListener(dateClicker)
        tvDate.setOnClickListener(dateClicker)

        // Ïù∏ÏõêÏàò
        val paxClicker = View.OnClickListener { showPassengerPickerDialog() }
        rowPaxView?.setOnClickListener(paxClicker)
        tvPax.setOnClickListener(paxClicker)

        // Ï∂ú/ÎèÑÏ∞© ÏÑ†ÌÉù & Ïä§Ïôë
        tvFrom.setOnClickListener { showAirportModalAll(true) }
        tvTo.setOnClickListener   { showAirportModalAll(false) }
        btnSwap.setOnClickListener { swapAirports() }

        // Í≤ÄÏÉâ
        btnSearch.setOnClickListener {
            val depDisplay = tvFrom.text.toString()
            val arrDisplay = tvTo.text.toString()
            val dep = normalizeAirport(depDisplay)
            val arr = normalizeAirport(arrDisplay)

            Log.d("FLIGHT_BTN", "dep=$dep, arr=$arr, outDate=$outDateYmd, inDate=$inDateYmd, round=$isRoundTrip")

            if (isRoundTrip) {
                if (outDateYmd == null || inDateYmd == null) {
                    Toast.makeText(this, "Í∞ÄÎäî ÎÇ†Í≥º Ïò§Îäî ÎÇ†ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", Toast.LENGTH_SHORT).show()
                    return@setOnClickListener
                }
                viewModel.searchFlights(dep, arr, outDateYmd!!, null)       // Í∞ÄÎäîÌé∏
                viewModel.searchInboundFlights(arr, dep, inDateYmd!!, null) // Ïò§ÎäîÌé∏
            } else {
                if (outDateYmd == null) {
                    Toast.makeText(this, "Ï∂úÎ∞ú ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", Toast.LENGTH_SHORT).show()
                    return@setOnClickListener
                }
                viewModel.searchFlights(dep, arr, outDateYmd!!, null)
            }
        }

        // Ï¥àÍ∏∞ ÌÖçÏä§Ìä∏
        tvPax.text = "Ï¥ù 1Î™Ö"
    }

    /** Ìï≠Í≥µÌé∏ ÏÑ†ÌÉù Ïãú: Í∏àÏï° Í∞±Ïã† + ÌïòÎã®Î∞î ÎÖ∏Ï∂ú + CTA Î≥¥Ïû• + Ïä§ÌÅ¨Î°§ ÏÇ¥Ïßù ÎÇ¥Î¶¨Í∏∞ */
    private fun onFlightSelected(item: Flight, position: Int, price: Int) {
        selectedOut = item
        selectedOutPrice = price

        // ‚úÖ ÌïòÎã®Î∞î ÎùÑÏö∞Í∏∞
        showBottomBarSimple(
            bottomBar = bottomBar,
            tvTotal   = tvTotalPrice,
            btn       = btnProceed,
            amount    = price,
            buttonText = if (isRoundTrip) "Ïò§Îäî Ìé∏ ÏÑ†ÌÉùÌïòÍ∏∞" else "Í≤∞Ï†úÌïòÍ∏∞"
        ) {
            if (isRoundTrip) openInboundSelection() else openPayment()
        }

        scroll.post { scroll.smoothScrollBy(0, dp(56)) }
    }

    /* ---------------------- Ï∂ú/ÎèÑÏ∞©/Ïä§Ïôë ---------------------- */
    private fun setDeparture(value: String, recordNonJeju: Boolean) {
        tvFrom.text = value
        if (value != "Ï†úÏ£º" && recordNonJeju) lastNonJejuForDeparture = value
        if (value == "Ï†úÏ£º" && tvTo.text.toString() == "Ï†úÏ£º") {
            setArrival(lastNonJejuForArrival.ifBlank { "ÍπÄÌè¨(ÏÑúÏö∏)" }, true)
        }
    }

    private fun setArrival(value: String, recordNonJeju: Boolean) {
        tvTo.text = value
        if (value != "Ï†úÏ£º" && recordNonJeju) lastNonJejuForArrival = value
        if (value == "Ï†úÏ£º" && tvFrom.text.toString() == "Ï†úÏ£º") {
            setDeparture(lastNonJejuForDeparture.ifBlank { "ÍπÄÌè¨(ÏÑúÏö∏)" }, true)
        }
    }

    private fun swapAirports() {
        val dep = tvFrom.text.toString()
        val arr = tvTo.text.toString()
        setDeparture(arr, arr != "Ï†úÏ£º")
        setArrival(dep, dep != "Ï†úÏ£º")
        btnSwap.animate().rotationBy(180f).setDuration(200).start()
    }

    private fun showAirportModalAll(forDeparture: Boolean) {
        val items = airports.toTypedArray()
        AlertDialog.Builder(this)
            .setTitle(if (forDeparture) "Ï∂úÎ∞úÏßÄ ÏÑ†ÌÉù" else "ÎèÑÏ∞©ÏßÄ ÏÑ†ÌÉù")
            .setItems(items) { dialog, which ->
                val chosen = items[which]
                if (forDeparture) setDeparture(chosen, chosen != "Ï†úÏ£º")
                else setArrival(chosen, chosen != "Ï†úÏ£º")
                dialog.dismiss()
            }.show()
    }

    /* ---------------------- ÎÇ†Ïßú ÏÑ†ÌÉù ---------------------- */
    private fun showSingleDatePicker() {
        val picker = MaterialDatePicker.Builder.datePicker()
            .setTitleText("Ï∂úÎ∞ú ÎÇ†Ïßú")
            .build()
        picker.addOnPositiveButtonClickListener { utcMillis ->
            val displayFmt = SimpleDateFormat("MM.dd(E)", Locale.KOREA).apply {
                timeZone = TimeZone.getTimeZone("UTC")
            }
            val apiFmt = SimpleDateFormat("yyyy-MM-dd", Locale.KOREA).apply {
                timeZone = TimeZone.getTimeZone("UTC")
            }
            tvDate.text = displayFmt.format(Date(utcMillis))
            outDateYmd = apiFmt.format(Date(utcMillis))
            inDateYmd = null
        }
        picker.show(supportFragmentManager, "single_date")
    }

    private fun showRangeDatePicker() {
        val picker = MaterialDatePicker.Builder.dateRangePicker()
            .setTitleText("Í∞ÄÎäî ÎÇ†Í≥º Ïò§Îäî ÎÇ†")
            .build()
        picker.addOnPositiveButtonClickListener { range ->
            val start = range.first
            val end = range.second
            if (start != null && end != null) {
                val displayFmt = SimpleDateFormat("MM.dd(E)", Locale.KOREA).apply {
                    timeZone = TimeZone.getTimeZone("UTC")
                }
                val apiFmt = SimpleDateFormat("yyyy-MM-dd", Locale.KOREA).apply {
                    timeZone = TimeZone.getTimeZone("UTC")
                }
                tvDate.text = "${displayFmt.format(Date(start))} ~ ${displayFmt.format(Date(end))}"
                outDateYmd = apiFmt.format(Date(start))
                inDateYmd  = apiFmt.format(Date(end))
            }
        }
        picker.show(supportFragmentManager, "range_date")
    }

    /* ---------------------- ÏäπÍ∞ù Ïàò ---------------------- */
    private fun showPassengerPickerDialog() {
        val dialogView = layoutInflater.inflate(R.layout.dialog_passenger_picker, null)
        val tvAdultCount = dialogView.findViewById<TextView>(R.id.tv_adult_count)
        val tvChildCount = dialogView.findViewById<TextView>(R.id.tv_child_count)
        val btnAdultMinus = dialogView.findViewById<Button>(R.id.btn_adult_minus)
        val btnAdultPlus = dialogView.findViewById<Button>(R.id.btn_adult_plus)
        val btnChildMinus = dialogView.findViewById<Button>(R.id.btn_child_minus)
        val btnChildPlus = dialogView.findViewById<Button>(R.id.btn_child_plus)
        val btnConfirmPassenger = dialogView.findViewById<Button>(R.id.btn_confirm_passenger)

        tvAdultCount.text = adultCount.toString()
        tvChildCount.text = childCount.toString()

        btnAdultMinus.setOnClickListener {
            if (adultCount > 1) adultCount--
            tvAdultCount.text = adultCount.toString()
        }
        btnAdultPlus.setOnClickListener {
            adultCount++
            tvAdultCount.text = adultCount.toString()
        }
        btnChildMinus.setOnClickListener {
            if (childCount > 0) childCount--
            tvChildCount.text = childCount.toString()
        }
        btnChildPlus.setOnClickListener {
            childCount++
            tvChildCount.text = childCount.toString()
        }

        val dialog = AlertDialog.Builder(this).setView(dialogView).create()
        btnConfirmPassenger.setOnClickListener {
            val total = adultCount + childCount
            tvPax.text = "Ï¥ù $total Î™Ö"
            dialog.dismiss()
        }
        dialog.show()
    }

    /* ---------------------- Îß§Ìïë ---------------------- */
    private fun normalizeAirport(display: String): String {
        val s = display.trim()
        return when {
            s.contains("ÍπÄÌè¨")     -> "ÏÑúÏö∏/ÍπÄÌè¨"
            s.contains("Ïù∏Ï≤ú")     -> "ÏÑúÏö∏/Ïù∏Ï≤ú"
            s.contains("ÍπÄÌï¥") || s.contains("Î∂ÄÏÇ∞") -> "Î∂ÄÏÇ∞/ÍπÄÌï¥"
            s.contains("ÏÇ¨Ï≤ú") || s.contains("ÏßÑÏ£º") -> "ÏÇ¨Ï≤ú"
            else -> s
        }
    }

    private fun dp(v: Int) = (v * resources.displayMetrics.density).toInt()

    /** Ìé∏ÎèÑ/ÏôïÎ≥µÏóê Îî∞Îùº ÌïòÎã® Î≤ÑÌäº Î¨∏Íµ¨/ÎèôÏûë ÏÑ∏ÌåÖ */
    private fun updateProceedCta() {
        if (isRoundTrip) {
            btnProceed.text = "Ïò§Îäî Ìé∏ ÏÑ†ÌÉùÌïòÍ∏∞"
            btnProceed.setOnClickListener { openInboundSelection() }
        } else {
            btnProceed.text = "Í≤∞Ï†úÌïòÍ∏∞"
            btnProceed.setOnClickListener { openPayment() }
        }
    }

    private fun openInboundSelection() {
        if (selectedOut == null) {
            Toast.makeText(this, "Î®ºÏ†Ä Í∞ÄÎäî Ìé∏ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", Toast.LENGTH_SHORT).show(); return
        }
        if (inDateYmd.isNullOrBlank()) {
            Toast.makeText(this, "Ïò§Îäî ÎÇ†ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", Toast.LENGTH_SHORT).show(); return
        }

        val depInbound = normalizeAirport(tvTo.text.toString())   // IN dep = Í∏∞Ï°¥ ÎèÑÏ∞©
        val arrInbound = normalizeAirport(tvFrom.text.toString()) // IN arr = Í∏∞Ï°¥ Ï∂úÎ∞ú

        startActivity(Intent(this, InboundSelectActivity::class.java).apply {
            putExtra(InboundSelectActivity.EXTRA_OUTBOUND, selectedOut)          // Flight: Serializable ÌïÑÏöî
            putExtra(InboundSelectActivity.EXTRA_OUT_PRICE, selectedOutPrice ?: 0)
            putExtra(InboundSelectActivity.EXTRA_DEP,  depInbound)
            putExtra(InboundSelectActivity.EXTRA_ARR,  arrInbound)
            putExtra(InboundSelectActivity.EXTRA_DATE, inDateYmd)                // yyyy-MM-dd
            putExtra(InboundSelectActivity.EXTRA_ADULT, adultCount)
            putExtra(InboundSelectActivity.EXTRA_CHILD, childCount)
        })
    }

    /** Ìé∏ÎèÑÏùº Îïå Í≤∞Ï†ú ÌôîÎ©¥ÏúºÎ°ú ÏßÅÌñâ */
    private fun openPayment() {
        val out = selectedOut
        if (out == null) {
            Toast.makeText(this, "Î®ºÏ†Ä Ìï≠Í≥µÌé∏ÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", Toast.LENGTH_SHORT).show()
            return
        }

        val people        = adultCount + childCount
        val baseFare      = adultCount * ADULT_PRICE + childCount * CHILD_PRICE
        val fuelTotal     = people * FUEL_SURCHARGE
        val facilityTotal = people * FACILITY_FEE
        val total         = baseFare + fuelTotal + facilityTotal

        startActivity(Intent(this, PaymentActivity::class.java).apply {
            putExtra("EXTRA_TOTAL", total)
            putExtra("EXTRA_BASE", baseFare)
            putExtra("EXTRA_FUEL", fuelTotal)
            putExtra("EXTRA_FACILITY", facilityTotal)

            // ÏÑ†ÌÉù Ï†ïÎ≥¥(ÌïÑÏöî Ïãú Payment ÌôîÎ©¥ÏóêÏÑú ÌôúÏö©)
            putExtra(ItineraryActivity.EXTRA_OUT_FLIGHT, out)           // FlightÏùÄ SerializableÏù¥Ïñ¥Ïïº Ìï®
            putExtra(ItineraryActivity.EXTRA_ADULT_COUNT, adultCount)
            putExtra(ItineraryActivity.EXTRA_CHILD_COUNT, childCount)
        })
    }

    // === ÌïòÎã® Í≥†Ï†ï Î∞î Í¥ÄÎ†® helper ===
    private fun Int.asWon(): String = "‚Ç©%,d".format(this)

    private fun View.slideUpShow(offsetPxIfUnknown: Int = 160, duration: Long = 220) {
        if (visibility != View.VISIBLE) {
            visibility = View.VISIBLE
            translationY = (height.takeIf { it > 0 } ?: offsetPxIfUnknown).toFloat()
            animate().translationY(0f).setDuration(duration).start()
        }
    }

    private fun View.slideDownHide(duration: Long = 200) {
        if (visibility == View.VISIBLE) {
            animate().translationY(height.toFloat())
                .setDuration(duration)
                .withEndAction { visibility = View.GONE; translationY = 0f }
                .start()
        }
    }

    private fun showBottomBarSimple(
        bottomBar: View,
        tvTotal: TextView,
        btn: MaterialButton,
        amount: Int,
        buttonText: String,
        onClick: () -> Unit
    ) {
        tvTotal.text = amount.asWon()
        btn.text = buttonText
        btn.setOnClickListener { onClick() }
        bottomBar.slideUpShow()
    }
}
